<?php

use Drupal\Core\Render\Element;
use Drupal\user\Entity\User;

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function sfmc_personalization_preprocess_page(array &$variables) {
  $sfmc_global_config = \Drupal::config('sfmc_personalization.settings');
  $sfmc_pages_config = \Drupal::config('sfmc_personalization.pages');

  // Get domains and convert to array
  $domains_text = $sfmc_global_config->get('domain');
  $allowed_domains = [];
  if (!empty($domains_text)) {
    // Split by newline and filter out empty lines
    $allowed_domains = array_filter(
      explode("\n", $domains_text),
      function($domain) {
        return !empty(trim($domain));
      }
    );
    // Trim whitespace from each domain
    $allowed_domains = array_map('trim', $allowed_domains);
  }

  $global_settings = [
    'allowed_domains' => $allowed_domains,
    'content_zones' => $sfmc_global_config->get('content_zones'),
  ];

  // Fetch user data if the user is logged in.
  $current_user = \Drupal::currentUser();
  if ($current_user->isAuthenticated()) {
    $user = User::load($current_user->id());
    $user_data = [];
    $user_fields = $sfmc_global_config->get('user_fields') ?? [];
    foreach ($user_fields as $field_name) {
      if ($user->hasField($field_name)) {
        $user_data[$field_name] = $user->get($field_name)->value;
      }
      if ($field_name == 'field_user_preferences') {
        $user_data[$field_name]['preferences'] = getUserPreferences($user->field_user_preferences->referencedEntities());
      }
    }
    $global_settings['user_data'] = $user_data;
  }

  // Attach the settings to drupalSettings.
  $variables['#attached']['drupalSettings']['sfmc_personalize']['global_config'] = $global_settings;
  $variables['#attached']['drupalSettings']['sfmc_personalize']['pages_config'] = $sfmc_pages_config->get('pages');

}

/**
 * Implements hook_page_bottom().
 */
function sfmc_personalization_page_bottom(array &$page_bottom) {
  // Get configuration settings.
  $global_config = \Drupal::config('sfmc_personalization.settings');
  $script_location = $global_config->get('script_location');
  $beacon_script_url = $global_config->get('beacon_script_url');

  // Only proceed if the URL is defined and the location is 'footer'.
  $location = !empty($beacon_script_url) && $script_location == 'footer' ? 'bottom' : 'top';
  add_beacon_script_tag($beacon_script_url, $page_bottom, $location);
}

/**
 * Get User Preferences data.
 */
function getUserPreferences($preferencesEntities) {
  $preferences = [];
  foreach ($preferencesEntities as $preference) {
    $preferences[] = [
      'Courses' => $preference->field_courses->getValue(),
      'Dietary Color' => $preference->field_dietary_color->getValue(),
      'Meals' => $preference->field_meals->getValue(),
      'Filters' => $preference->field_other_filters->getValue(),
      'Exclusions' => $preference->field_exclusion->getValue(),
      'Diet' => $preference->field_dietary->getValue(),
    ];
  }
  return $preferences;
}

/**
 * Adds a script tag to the specified page location.
 */
function add_beacon_script_tag($script_url, &$renderer, $region) {
  // Retrieve async configuration.
  $global_config = \Drupal::config('sfmc_personalization.settings');
  $async = $global_config->get('async') ? 'async' : '';

  // Build the script render array.
  if ($async) {
    $script = [
      '#type' => 'html_tag',
      '#tag' => 'script',
      '#attributes' => [
        'src' => $script_url,
        $async => TRUE,
      ],
    ];
  }
  else {
    $script = [
      '#type' => 'html_tag',
      '#tag' => 'script',
      '#attributes' => [
        'src' => $script_url,
      ],
    ];
  }

  // Attach to the specified region.
  if ($region == 'top') {
    $renderer['#attached']['html_head'][] = [$script, 'sfmc_personalization_beacon_script'];
  } else {
    $renderer[$region . '_scripts'] = $script;
  }
}
