<?php

use Drupal\user\Entity\User;
use Drupal\Core\Render\Element;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function sfmc_personalization_preprocess_page(array &$variables) {
  $sfmc_global_config = \Drupal::config('sfmc_personalization.settings');
  $sfmc_pages_config = \Drupal::config('sfmc_personalization.pages');

  // Get domains and convert to array
  $domains_text = $sfmc_global_config->get('domain');
  $allowed_domains = [];
  if (!empty($domains_text)) {
    // Split by newline and filter out empty lines
    $allowed_domains = array_filter(
      explode("\n", $domains_text),
      function($domain) {
        return !empty(trim($domain));
      }
    );
    // Trim whitespace from each domain
    $allowed_domains = array_map('trim', $allowed_domains);
  }

  $global_settings = [
    'allowed_domains' => $allowed_domains,
    'content_zones' => $sfmc_global_config->get('content_zones'),
  ];

  // Fetch user data if the user is logged in.
  $current_user = \Drupal::currentUser();
  if ($current_user->isAuthenticated()) {
    $user = User::load($current_user->id());
    $user_data = [];
    $user_fields = $sfmc_global_config->get('user_fields') ?? [];
    foreach ($user_fields as $field_name) {
      if ($user->hasField($field_name)) {
        $user_data[$field_name] = $user->get($field_name)->value;
      }
      if ($field_name == 'field_user_preferences') {
        $user_data[$field_name]['preferences'] = getUserPreferences($user->field_user_preferences->referencedEntities());
      }
    }
    $global_settings['user_data'] = $user_data;
  }
  // Get the current node and its content type.
  $current_node = \Drupal::routeMatch()->getParameter('node');
  if ($current_node instanceof \Drupal\node\NodeInterface) {
    $content_type = $current_node->getType();
  }
  $variables['#attached']['drupalSettings']['path']['contentType'] = $content_type;

  // Attach the settings to drupalSettings.
  $variables['#attached']['drupalSettings']['sfmc_personalize']['global_config'] = $global_settings;
  $variables['#attached']['drupalSettings']['sfmc_personalize']['pages_config'] = $sfmc_pages_config->get('pages');

  // Add cache context to ensure settings vary by user.
  $variables['#cache']['contexts'][] = 'user';
}

/**
 * Implements hook_library_info_build().
 * Dynamically builds library definitions.
 */
function sfmc_personalization_library_info_build() {
  $libraries = [];

  $global_config = \Drupal::config('sfmc_personalization.settings');
  $beacon_script_url = $global_config->get('beacon_script_url');
  $async = $global_config->get('async') ? 'async' : '';
  $defer = $global_config->get('defer') ? 'defer' : '';

  if ($beacon_script_url) {
    $libraries['dynamic-external-sfmc-beacon'] = [
      'js' => [
        $beacon_script_url => [
          'type' => 'external',
          'minified' => true,
          'attributes' => [
            'defer' => $defer ? TRUE : FALSE,
            'async' => $async ? TRUE : FALSE,
          ],
        ],
      ],
      'dependencies' => [
        'core/drupal',
        'core/drupalSettings'
      ],
    ];
  }

  return $libraries;
}

/**
 * Implements hook_page_attachments().
 */
function sfmc_personalization_page_attachments(array &$attachments) {
  // Get configuration settings.
  $attachments['#attached']['library'][] = 'sfmc_personalization/dynamic-external-sfmc-beacon';
}

/**
 * Implements hook_preprocess_html().
 * Alternative approach for footer scripts
 */
// function sfmc_personalization_preprocess_html(&$variables) {
//   $global_config = \Drupal::config('sfmc_personalization.settings');
//   $script_location = $global_config->get('script_location');
//   $beacon_script_url = $global_config->get('beacon_script_url');

//   if ($script_location === 'footer') {
//     $script_markup = [
//       '#type' => 'html_tag',
//       '#tag' => 'script',
//       '#attributes' => [
//         'src' => $beacon_script_url,
//       ],
//       '#weight' => 10000,
//       '#dependencies' => [
//         'library' => [
//           'core/drupal',
//           'core/drupalSettings',
//         ],
//       ],
//     ];

//     $variables['page_bottom']['your_script'] = $script_markup;
//   }
// }

/**
 * Implements hook_page_bottom().
 */
// function sfmc_personalization_page_bottom(array &$page_bottom) {
//   // Get configuration settings.
//   $global_config = \Drupal::config('sfmc_personalization.settings');
//   $script_location = $global_config->get('script_location');
//   $beacon_script_url = $global_config->get('beacon_script_url');

//   // Only proceed if the URL is defined and the location is 'footer'.
//   $location = !empty($beacon_script_url) && $script_location == 'footer' ? 'bottom' : 'top';
//   add_beacon_script_tag($beacon_script_url, $page_bottom, $location);
// }

/**
 * Adds a script tag to the specified page location.
 */
// function add_beacon_script_tag($script_url, &$renderer, $region) {
//   // Retrieve async configuration.
//   $global_config = \Drupal::config('sfmc_personalization.settings');
//   $async = $global_config->get('async') ? 'async' : '';

//   // Build the script render array.
//   if ($async) {
//     $script = [
//       '#type' => 'html_tag',
//       '#tag' => 'script',
//       '#attributes' => [
//         'src' => $script_url,
//         $async => TRUE,
//       ],
//     ];
//   }
//   else {
//     $script = [
//       '#type' => 'html_tag',
//       '#tag' => 'script',
//       '#attributes' => [
//         'src' => $script_url,
//       ],
//     ];
//   }

//   // Attach to the specified region.
//   if ($region == 'top') {
//     $renderer['#attached']['html_head'][] = [$script, 'sfmc_personalization_beacon_script'];
//   } else {
//     $renderer[$region . '_scripts'] = $script;
//   }
// }

/**
 * Get User Preferences data.
 */
function getUserPreferences($preferencesEntities) {
  $preferences = [];
  foreach ($preferencesEntities as $preference) {
    $preferences[] = [
      'Courses' => $preference->field_courses->getValue(),
      'Dietary Color' => $preference->field_dietary_color->getValue(),
      'Meals' => $preference->field_meals->getValue(),
      'Filters' => $preference->field_other_filters->getValue(),
      'Exclusions' => $preference->field_exclusion->getValue(),
      'Diet' => $preference->field_dietary->getValue(),
    ];
  }
  return $preferences;
}
